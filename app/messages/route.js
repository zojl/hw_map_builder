module.exports = function(app) {
	app.bot.command('/r ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/p ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/w ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/route ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/path ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/way ', (ctx) => handleRouteGroup(ctx));

	app.bot.command('/wg ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/rg ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/pg ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/routegroup ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/pathgroup ', (ctx) => handleRouteGroup(ctx));
	app.bot.command('/waygroup ', (ctx) => handleRouteGroup(ctx));

	app.bot.command('/traverse', (ctx) => handleTraverse(ctx));
	app.bot.command('/trv', (ctx) => handleTraverse(ctx));
	app.bot.command('/tsp', (ctx) => handleTraverse(ctx));
	app.bot.command('/t', (ctx) => handleTraverse(ctx));
	
	async function handleRouteGroup(ctx) {
		const chat = await app.getChatFromMessage(ctx);
		if (chat === null) {
			return;
		}
		const subnet = await app.getSubnetFromChat(chat);
		let dates = app.getDates();

		const args = ctx.message.text.split(' ');
		if (args.length < 3) {
			ctx.reply('–£–∫–∞–∂–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä /route 00 AA BB CC DD, –≥–¥–µ 00 ‚Äî¬†–∏—Å—Ö–æ–¥–Ω–æ–µ');
			return;
		}

		let routes = [];
		let usedDevices = [];
		const delimiter = chat.delimiter ? chat.delimiter : ' ‚Üí ';
		const source = args[1].length == 1 ? "0" + args[1] : args[1];
		for (const targetNum in args) {
			if (targetNum < 2) {
				continue;
			}

			const target = args[targetNum].length == 1 ? "0" + args[targetNum] : args[targetNum];
			if (parseInt(target, 16) > 255) {
				routes.join(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ üìü${target}`);
				continue
			}

			if (usedDevices.includes(target.toUpperCase())) {
				continue;
			}

			const route = await app.dbUtil.pgroute.getRoute(source, target, dates.day, subnet.id);
			if (route !== null && route.length > 0) {
				const cost = route.length - 1;
				const routeReadable = route.join(delimiter);
				routes.push(`‚ö°${cost}: ${routeReadable}`);
				usedDevices.push(target.toUpperCase());
			} else {
				routes.push(`‚ùå –ù–µ –º–æ–≥—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –æ—Ç üìü${args[1]} –¥–æ üìü${target}`);
			}
		}

		if (routes.length == 0) {
			ctx.reply('–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –Ω–∏ –¥–æ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.');
			return;
		}

		const deprecatedCommands = ['/wg', '/rg', '/pg', '/waygroup', '/routegroup', '/pathgroup'];
		if (deprecatedCommands.includes(args[0].toLowerCase())) {
			routes.push(`\n‚ö†–ö–æ–º–∞–Ω–¥—ã –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ${args[0]}) –æ–±—ä—è–≤–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ (/p, /r, /w).`)
		}

		ctx.reply(routes.join("\n"));
	}

	async function handleTraverse(ctx) {
		const chat = await app.getChatFromMessage(ctx);
		if (chat === null) {
			return;
		}
		const subnet = await app.getSubnetFromChat(chat);

		let dates = app.getDates();
		let targetFromReply = null;

		const helpMsg = '–£–∫–∞–∂–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä /traverse 55 40-7F, –≥–¥–µ 55 ‚Äî¬†–∏—Å—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';

		const args = ctx.message.text.split(' ');
		if (args.length < 3 || args.length > 4) {
			ctx.reply(helpMsg);
			return;
		}

		let minRange, maxRange;
		if (args.length === 3) {
			const subnetRaw = args[2];
			const minmaxRange = subnetRaw.split('-');
			if (minmaxRange.length != 2) {
				ctx.reply(helpMsg);
				return;
			}
			minRange = minmaxRange[0];
			maxRange = minmaxRange[1];
		} else {
			minRange = args[2];
			maxRange = args[3];
		}

		const sourceDevice = await app.repository.device.getOneByCode(args[1]);
		if (sourceDevice === null) {
			ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
			return;
		}

		const minRangeDevice = await app.repository.device.getOneByCode(minRange);
		if (minRangeDevice === null) {
			ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞');
			return;
		}

		const maxRangeDevice = await app.repository.device.getOneByCode(maxRange);
		if (maxRangeDevice === null) {
			ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞');
			return;
		}

		const route = await app.dbUtil.pgroute.getTspIds(sourceDevice.id, minRangeDevice.code, maxRangeDevice.code, dates.day, subnet.id);
		if (route.length === 0) {
			ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç');
			return;
		}

		let outRoute = '–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:\n';
		let totalCost = 0;
		const delimiter = chat.delimiter ? chat.delimiter : ' ‚Üí ';
		for (const stepNum in route) {
			const step = route[stepNum];
			const readableStepNum = parseInt(stepNum) + 1;
			totalCost += step.length - 1;
			outRoute += `#${readableStepNum}. ‚ö°${step.length - 1}: ${step.join(delimiter)}` + '\n';
		}
		outRoute += `–ò—Ç–æ–≥–æ –ø—É—Ç—å —Ç—Ä–µ–±—É–µ—Ç ‚ö°${totalCost} –º–æ—â–Ω–æ—Å—Ç–∏`;

		ctx.reply(outRoute);
	}
}