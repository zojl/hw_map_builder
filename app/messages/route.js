module.exports = function(app) {
	app.bot.command('/r ', (ctx) => {
		handleCommand(ctx);
	})

	app.bot.command('/p ', (ctx) => {
		handleCommand(ctx);
	})

	app.bot.command('/w ', (ctx) => {
		handleCommand(ctx);
	})

	app.bot.command('/route ', (ctx) => {
		handleCommand(ctx);
	})


	app.bot.command('/path ', (ctx) => {
		handleCommand(ctx);
	})

	app.bot.command('/way ', (ctx) => {
		handleCommand(ctx);
	})

	app.bot.command('/wg ', (ctx) => {
		handleRouteGroup(ctx);
	})

	app.bot.command('/rg ', (ctx) => {
		handleRouteGroup(ctx);
	})

	app.bot.command('/pg ', (ctx) => {
		handleRouteGroup(ctx);
	})

	app.bot.command('/routegroup ', (ctx) => {
		handleRouteGroup(ctx);
	})

	app.bot.command('/pathgroup ', (ctx) => {
		handleRouteGroup(ctx);
	})

	app.bot.command('/waygroup ', (ctx) => {
		handleRouteGroup(ctx);
	})

	app.bot.command('/traverse', (ctx) => {
		handleTraverse(ctx);
	})

	app.bot.command('/trv', (ctx) => {
		handleTraverse(ctx);
	})

	app.bot.command('/tsp', (ctx) => {
		handleTraverse(ctx);
	})

	app.bot.command('/t', (ctx) => {
		handleTraverse(ctx);
	})

	async function handleCommand(ctx) {
		const chat = await app.getChatFromMessage(ctx);
		if (chat === null) {
			return;
		}
		const subnet = await app.getSubnetFromChat(chat);

		let dates = app.getDates();
        let targetFromReply = null;

        if (
            typeof(ctx.message.reply_message) !== 'undefined'
            && typeof(ctx.message.reply_message.fwd_messages) === 'object'
            && Array.isArray(ctx.message.reply_message.fwd_messages)
            && ctx.message.reply_message.fwd_messages.length === 1
            && ctx.message.reply_message.fwd_messages[0].from_id === parseInt(process.env.HW_BOT_ID)
            && ctx.message.reply_message.fwd_messages[0].text.startsWith('–¢—ã –∞—Ç–∞–∫–æ–≤–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        ) {
            const msgText = ctx.message.reply_message.fwd_messages[0].text;
            targetFromReply = msgText.substring(msgText.length - 2);
        }

        const args = ctx.message.text.split(' ');
		if (
            args.length <= 2
            && !(
                args.length === 2
                && targetFromReply !== null
            )
        ) {
			ctx.reply('–£–∫–∞–∂–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä /route 00 FF');
			return;
		}

        const target = targetFromReply !== null ? targetFromReply : args[2];
		const result = await app.dbUtil.pgroute.getRoute(args[1], target, dates.day, subnet.id);
		console.log([
			ctx.message.from_id,
			result
		]);
		if (result === null || result.length === 0) {
			ctx.reply(`‚ùå –£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ—Ç üìü${args[1]} –¥–æ üìü${target}.`);
			return;
		}

		const cost = result.length - 1;
		const delimiter = chat.delimiter ? chat.delimiter : ' ‚Üí ';
		const route = result.join(delimiter);
		ctx.reply(`‚ö°${cost}: ${route}`);
	}

	async function handleRouteGroup(ctx) {
		const chat = await app.getChatFromMessage(ctx);
		if (chat === null) {
			return;
		}
		const subnet = await app.getSubnetFromChat(chat);
		let dates = app.getDates();

		const args = ctx.message.text.split(' ');
		if (args.length < 4) {
			ctx.reply('–£–∫–∞–∂–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–µ—á–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä /route 00 AA BB CC DD, –≥–¥–µ 00 ‚Äî¬†–∏—Å—Ö–æ–¥–Ω–æ–µ');
			return;
		}

		let routes = [];
		let usedDevices = [];
		const delimiter = chat.delimiter ? chat.delimiter : ' ‚Üí ';
		for (const targetNum in args) {
			if (targetNum < 2) {
				continue;
			}

			const target = args[targetNum];
			if (parseInt(target, 16) > 255) {
				continue;
			}

			if (usedDevices.includes(target.toUpperCase())) {
				continue;
			}

			const route = await app.dbUtil.pgroute.getRoute(args[1], target, dates.day, subnet.id);
			if (route !== null && route.length > 0) {
				const cost = route.length - 1;
				const routeReadable = route.join(delimiter);
				routes.push(`‚ö°${cost}: ${routeReadable}`);
				usedDevices.push(target.toUpperCase());
			} else {
				routes.push(`‚ùå –ù–µ –º–æ–≥—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –æ—Ç üìü${args[1]} –¥–æ üìü${target}`);
			}
		}

		if (routes.length == 0) {
			ctx.reply('–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –Ω–∏ –¥–æ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.');
			return;
		}

		ctx.reply("–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n" + routes.join("\n"));
	}

	async function handleTraverse(ctx) {
		const chat = await app.getChatFromMessage(ctx);
		if (chat === null) {
			return;
		}
		const subnet = await app.getSubnetFromChat(chat);

		let dates = app.getDates();
		let targetFromReply = null;

		const helpMsg = '–£–∫–∞–∂–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä /traverse 55 40-7F, –≥–¥–µ 55 ‚Äî¬†–∏—Å—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';

		const args = ctx.message.text.split(' ');
		if (args.length < 3 || args.length > 4) {
			ctx.reply(helpMsg);
			return;
		}

		let minRange, maxRange;
		if (args.length === 3) {
			const subnetRaw = args[2];
			const minmaxRange = subnetRaw.split('-');
			if (minmaxRange.length != 2) {
				ctx.reply(helpMsg);
				return;
			}
			minRange = minmaxRange[0];
			maxRange = minmaxRange[1];
		} else {
			minRange = args[2];
			maxRange = args[3];
		}

		const sourceDevice = await app.repository.device.getOneByCode(args[1]);
		if (sourceDevice === null) {
			ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
			return;
		}

		const minRangeDevice = await app.repository.device.getOneByCode(minRange);
		if (minRangeDevice === null) {
			ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞');
			return;
		}

		const maxRangeDevice = await app.repository.device.getOneByCode(maxRange);
		if (maxRangeDevice === null) {
			ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞');
			return;
		}

		const route = await app.dbUtil.pgroute.getTspIds(sourceDevice.id, minRangeDevice.code, maxRangeDevice.code, dates.day, subnet.id);
		if (route.length === 0) {
			ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç');
			return;
		}

		let outRoute = '–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:\n';
		let totalCost = 0;
		const delimiter = chat.delimiter ? chat.delimiter : ' ‚Üí ';
		for (const stepNum in route) {
			const step = route[stepNum];
			const readableStepNum = parseInt(stepNum) + 1;
			totalCost += step.length - 1;
			outRoute += `#${readableStepNum}. ‚ö°${step.length - 1}: ${step.join(delimiter)}` + '\n';
		}
		outRoute += `–ò—Ç–æ–≥–æ –ø—É—Ç—å —Ç—Ä–µ–±—É–µ—Ç ‚ö°${totalCost} –º–æ—â–Ω–æ—Å—Ç–∏`;

		ctx.reply(outRoute);
	}
}