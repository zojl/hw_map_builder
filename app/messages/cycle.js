module.exports = function(app) {
    app.bot.command('/cycle', async (ctx) => {
        handleCycles(ctx)
    });

    app.bot.command('/circle', async (ctx) => {
        handleCycles(ctx)
    });

    app.bot.command('/c ', async (ctx) => {
        handleCycles(ctx)
    });

    const handleCycles = async (ctx) => {
        const chat = await app.getChatFromMessage(ctx);
        if (chat === null) {
            return;
        }
        const subnet = await app.getSubnetFromChat(chat);

        const args = ctx.message.text.split(' ');
        if (
            args.length < 2 
            ) {
            ctx.reply('–£–∫–∞–∂–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä /cycle 00');
            return;
        }

        const device = await app.repository.device.getOneByCode(args[1]);
        if (device === null) {
            ctx.reply('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
            return;
        }

        let dates = app.getDates();
        const connections = await app.repository.connection.getAllBySourceDayAndSubnet(device.id, dates.day, subnet.id);
        if (connections.length === 0) {
            ctx.reply('–≠—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∫–∞—Ä—Ç–µ. –ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ —Å–≤—è–∑—è–º–∏, –µ—Å–ª–∏ –ø–æ—Å–µ—â–∞–ª –µ–≥–æ.');
            return;
        }
        
        if (args.length >= 3) {
            handleCycleFixedLength(args, subnet, dates);
            return;
        }

        let cycles = [];
        let cyclesReadable = [];
        const sourceCode = args[1].toUpperCase();
        const delimiter = chat.delimiter ? chat.delimiter : ' ‚Üí ';
        for (const connection of connections) {
            const target = await app.repository.device.getOneById(connection.target);
            const cycle = await app.dbUtil.pgroute.getRoute(target.code, args[1], dates.day, subnet.id);
            if (cycle === null) {
                continue;
            }
            
            cyclesReadable.push(`${cycle.length}üìü : ${sourceCode}` + delimiter + cycle.join(delimiter));
        }

        ctx.reply(`–ö—Ä–∞—Ç—á–∞–π—à–∏–µ –∑–∞–∫–æ–ª—å—Ü–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${sourceCode} —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ:\n` + cyclesReadable.join("\n"));
    }
   
    async function handleCycleFixedLength (args, subnet, dates) {
        const sourceCode = args[1].toUpperCase();
        const source = await app.repository.device.getOneByCode(sourceCode);
        
        const connections = await app.repository.connection.getAllByDayAndSubnet(dates.day, subnet.id);
        
        return;
        
        const route = findRoute(source.id, parseInt(args[2]), connections);
        console.log(route);
        let routeCodes = [];
        for (const node of route) {
            const device = await app.repository.device.getOneById(node);
            routeCodes.push(device.code);
        }
        
        console.log(routeCodes);
    }
    
    function findRoute(start, length, connections) {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —É–∑–ª—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ‚Äî –º–∞—Å—Å–∏–≤—ã —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ —É–∑–ª–æ–≤
        const graph = {};
        for (const connection of connections) {
            const from  = connection.source;
            const to = connection.target;
            if (!graph[from]) {
                graph[from] = [];
            }
            if (!graph[to]) {
                graph[to] = [];
            }
            graph[from].push(to);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        const route = [];

        // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é dfs –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        dfs(start, length, graph, route);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        return route;
    }

    function dfs(node, length, graph, route, startNode) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –≤ –º–∞—Ä—à—Ä—É—Ç
      route.push(node);
    
      // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∏–≥ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –∑–∞–∫–æ–ª—å—Ü–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
      if (route.length === length && node === startNode) {
        return true;
      }
    
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–∏–º —É–∑–ª–æ–º —É–∑–ª–æ–≤
      const connectedNodes = graph[node] || [];
    
      // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —É–∑–ª—É
      for (const nextNode of connectedNodes) {
        // –ï—Å–ª–∏ —É–∑–µ–ª —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Ä—à—Ä—É—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if (route.includes(nextNode)) {
          continue;
        }
    
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º dfs –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞
        if (dfs(nextNode, length, graph, route, startNode)) {
          return true; // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
        }
      }
    
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ –Ω–µ –ø—Ä–∏–≤–µ–ª –∫ –Ω—É–∂–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
      route.pop();
      return false;
    }
}