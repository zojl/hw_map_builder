module.exports = function(app) {
    app.bot.command('/subscribe', (ctx) => handleSubscribe(ctx));
    app.bot.command('/sub ', (ctx) => handleSubscribe(ctx));

    app.bot.command('/unsubscribe', (ctx) => handleUnsubscribe(ctx));
    app.bot.command('/unsub', (ctx) => handleUnsubscribe(ctx));
    
    app.bot.command('/subscriptions', (ctx) => handleSubList(ctx));
    app.bot.command('/sublist', (ctx) => handleSubList(ctx))
    app.bot.command('/subs', (ctx) => handleSubList(ctx))

    const handleSubscribe = async (ctx) => {
		const chat = await app.getChatFromMessage(ctx);
        if (chat == null) {
			return;
		}

        if (!chat.canSeeNpc) {
            ctx.reply('–ß–∞—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ NPC');
            return;
        }

		const args = ctx.message.text.split(' ');

		if (args.length < 2) {
			ctx.reply('–û—Ç–ø—Ä–∞–≤—å –∏–º—è –±–æ—Ç–∞ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞), —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å —á–∞—Ç –Ω–∞ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´/sub üéØüí£D3t3c7 (35)¬ª)');
            return;
		}
        
        const npcName = args.slice(1).join(' ');
        const npc = await app.repository.npc.getOneByName(npcName);
        if (npc === null) {
            ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è NPC');
            return;
        }
        
        const existingSubscription = await app.repository.chatNpc.getOneByChatAndNpc(chat.id, npc.id);
        if (existingSubscription !== null) {
            ctx.reply('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ–≥–æ NPC –≤ —ç—Ç–æ–º —á–∞—Ç–µ');
            return;
        }
        
        await app.model.chatNpcs.create({
            chat: chat.id,
            npc: npc.id,
        });
        ctx.reply('–ß–∞—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NPC ' + npc.name);
    }
    
    const handleUnsubscribe = async (ctx) => {
		const chat = await app.getChatFromMessage(ctx);
        if (chat == null) {
			return;
		}

		const args = ctx.message.text.split(' ');

		if (args.length < 2) {
			ctx.reply('–û—Ç–ø—Ä–∞–≤—å –∏–º—è –±–æ—Ç–∞ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞), —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å —á–∞—Ç –æ—Ç –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´/sub üéØüí£D3t3c7 (35)¬ª)');
            return;
		}
        
        const npcName = args.slice(1).join(' ');
        const npc = await app.repository.npc.getOneByName(npcName);
        if (npc === null) {
            ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è NPC');
            return;
        }
        
        const existingSubscription = await app.repository.chatNpc.getOneByChatAndNpc(chat.id, npc.id);
        if (existingSubscription === null) {
            ctx.reply('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ–≥–æ NPC –≤ —ç—Ç–æ–º —á–∞—Ç–µ');
            return;
        }
        
        await app.model.chatNpcs.destroy({
            where: {
                chat: chat.id,
                npc: npc.id,
            }
        });
        ctx.reply('–ß–∞—Ç –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π NPC ' + npc.name);
    }

    const handleSubList = async (ctx) => {
        const chat = await app.getChatFromMessage(ctx);
        if (chat == null) {
            return;
        }

        const subscriptions = await app.repository.chatNpc.getAllByChat(chat.id);
        if (subscriptions.length === 0 || subscriptions === null) {
            ctx.reply('–ß–∞—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NPC');
            return;
        }

        const npcIds = subscriptions.map((sub) => sub.npc);
        const npcs = await app.repository.npc.getAllByIds(npcIds);
        const npcNames = npcs.map((npc) => npc.name).join("\n");
        const addition = chat.canSeeNpc
            ? ""
            : "\n–ß–∞—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º NPC, –ø–æ—ç—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥—É—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.";

        ctx.reply("–ß–∞—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NPC:\n" + npcNames + addition);
    }
}